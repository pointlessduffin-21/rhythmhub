<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/edu/uc/intprog32/escarro/myapplication/UsersManagerInstrumentedTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/edu/uc/intprog32/escarro/myapplication/UsersManagerInstrumentedTest.kt" />
              <option name="updatedContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import androidx.test.platform.app.InstrumentationRegistry&#10;import org.junit.Assert.*&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;&#10;@RunWith(AndroidJUnit4::class)&#10;class UsersManagerInstrumentedTest {&#10;    @Test&#10;    fun adminExistsAfterMigration() {&#10;        val ctx = InstrumentationRegistry.getInstrumentation().targetContext&#10;        UsersManager.migrateLegacy(ctx)&#10;        val users = UsersManager.getUsers(ctx)&#10;        assertTrue(&quot;Admin should exist&quot;, users.containsKey(&quot;admin&quot;))&#10;        assertEquals(&quot;admin&quot;, users[&quot;admin&quot;])&#10;    }&#10;&#10;    @Test&#10;    fun createUpdateDeleteUserFlow() {&#10;        val ctx = InstrumentationRegistry.getInstrumentation().targetContext&#10;        UsersManager.migrateLegacy(ctx)&#10;&#10;        // Ensure clean state for test user&#10;        UsersManager.deleteUser(ctx, &quot;test_user&quot;)&#10;&#10;        // Create&#10;        val created = UsersManager.createUser(ctx, &quot;test_user&quot;, &quot;pass1&quot;)&#10;        assertTrue(created)&#10;        var users = UsersManager.getUsers(ctx)&#10;        assertTrue(users.containsKey(&quot;test_user&quot;))&#10;        assertEquals(&quot;pass1&quot;, users[&quot;test_user&quot;])&#10;&#10;        // Update&#10;        val updated = UsersManager.updateUser(ctx, &quot;test_user&quot;, &quot;pass2&quot;)&#10;        assertTrue(updated)&#10;        users = UsersManager.getUsers(ctx)&#10;        assertEquals(&quot;pass2&quot;, users[&quot;test_user&quot;])&#10;&#10;        // Delete&#10;        val deleted = UsersManager.deleteUser(ctx, &quot;test_user&quot;)&#10;        assertTrue(deleted)&#10;        users = UsersManager.getUsers(ctx)&#10;        assertFalse(users.containsKey(&quot;test_user&quot;))&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Login&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.Dummy&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;edu.Dummy&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.Home&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Login&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.Dummy&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;edu.Dummy&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.Home&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RegisterActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.UserManagementActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.LoginActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/Home.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/Home.kt" />
              <option name="originalContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;&#10;class Home : Activity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setContentView(R.layout.activity_home)&#10;&#10;        val sharedPref = getSharedPreferences(&quot;UserPref&quot;, MODE_PRIVATE)&#10;        val profileName = findViewById&lt;TextView&gt;(R.id.profile_username)&#10;        val username = sharedPref.getString(&quot;username&quot;, null)&#10;        val logoutBtn = findViewById&lt;Button&gt;(R.id.logoutButton)&#10;        val nextBtn = findViewById&lt;Button&gt;(R.id.nextButton)&#10;&#10;        profileName.text = &quot;$username&quot;&#10;&#10;        logoutBtn.setOnClickListener {&#10;&#10;            Toast.makeText(this, &quot;Logging out, byebye&quot;, Toast.LENGTH_LONG).show()&#10;&#10;            val intent = Intent(this, LoginActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        nextBtn.setOnClickListener {&#10;&#10;            Toast.makeText(this, &quot;Next Page&quot;, Toast.LENGTH_LONG).show()&#10;&#10;            val intent = Intent(this, Dummy::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;&#10;class Home : Activity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setContentView(R.layout.activity_home)&#10;&#10;        // Use UsersManager&#10;        UsersManager.migrateLegacy(this)&#10;&#10;        val profileName = findViewById&lt;TextView&gt;(R.id.profile_username)&#10;        val username = UsersManager.getCurrentUser(this)&#10;        val logoutBtn = findViewById&lt;Button&gt;(R.id.logoutButton)&#10;        val nextBtn = findViewById&lt;Button&gt;(R.id.nextButton)&#10;        val userMgmtBtn = findViewById&lt;Button&gt;(R.id.userManagementButton)&#10;&#10;        profileName.text = &quot;${username ?: &quot;&quot;}&quot;&#10;&#10;        // Show admin-only button&#10;        if (username == &quot;admin&quot;) {&#10;            userMgmtBtn.visibility = Button.VISIBLE&#10;        } else {&#10;            userMgmtBtn.visibility = Button.GONE&#10;        }&#10;&#10;        userMgmtBtn.setOnClickListener {&#10;            val intent = Intent(this, UserManagementActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        logoutBtn.setOnClickListener {&#10;            Toast.makeText(this, &quot;Logging out, byebye&quot;, Toast.LENGTH_LONG).show()&#10;&#10;            // Clear remember flag and current user&#10;            UsersManager.setRemember(this, false)&#10;            UsersManager.clearCurrentUser(this)&#10;&#10;            val intent = Intent(this, LoginActivity::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        nextBtn.setOnClickListener {&#10;            Toast.makeText(this, &quot;Next Page&quot;, Toast.LENGTH_LONG).show()&#10;&#10;            val intent = Intent(this, Dummy::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/LoginActivity.kt" />
              <option name="originalContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;&#10;class LoginActivity : Activity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_login)&#10;&#10;        val sharedPref = getSharedPreferences(&quot;UserPref&quot;, MODE_PRIVATE)&#10;&#10;        val input_username = findViewById&lt;EditText&gt;(R.id.editText)&#10;        val input_password = findViewById&lt;EditText&gt;(R.id.editPassword)&#10;&#10;        val login_button = findViewById&lt;Button&gt;(R.id.loginButton)&#10;&#10;        login_button.setOnClickListener {&#10;            val username = input_username.text.toString()&#10;            val password = input_password.text.toString()&#10;&#10;            val savedUsername = sharedPref.getString(&quot;username&quot;, null)&#10;            val savedPassword = sharedPref.getString(&quot;password&quot;, null)&#10;&#10;            if (username.isNullOrEmpty() || password.isNullOrEmpty()) {&#10;                Toast.makeText(this, &quot;Username or Password is empty&quot;, Toast.LENGTH_LONG).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (username != savedUsername) {&#10;                Toast.makeText(this, &quot;User doesn't exist&quot;, Toast.LENGTH_LONG).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (password != savedPassword) {&#10;                Toast.makeText(this, &quot;Wrong password&quot;, Toast.LENGTH_LONG).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val intent = Intent(this, Home::class.java)&#10;            startActivity(intent)&#10;&#10;&#10;        }&#10;        val register_button = findViewById&lt;Button&gt;(R.id.registerButton)&#10;        register_button.setOnClickListener {&#10;            Log.e(&quot;Sample&quot;,&quot;Clicky&quot;)&#10;&#10;            Toast.makeText(this, &quot;Register&quot;, Toast.LENGTH_LONG).show()&#10;&#10;            val intent = Intent(this, RegisterActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;&#10;&#10;    }&#10;}" />
              <option name="updatedContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.CheckBox&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;&#10;class LoginActivity : Activity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_login)&#10;&#10;        // Ensure users map exists and admin is present&#10;        UsersManager.migrateLegacy(this)&#10;&#10;        val input_username = findViewById&lt;EditText&gt;(R.id.editText)&#10;        val input_password = findViewById&lt;EditText&gt;(R.id.editPassword)&#10;        val rememberCheckBox = findViewById&lt;CheckBox&gt;(R.id.rememberCheckBox)&#10;&#10;        // If remember and a current user exists, auto-login&#10;        val remembered = UsersManager.getRemember(this)&#10;        val currentUser = UsersManager.getCurrentUser(this)&#10;        if (remembered &amp;&amp; !currentUser.isNullOrEmpty()) {&#10;            // proceed to Home directly&#10;            val intent = Intent(this, Home::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // Prefill username if current user exists&#10;        if (!currentUser.isNullOrEmpty()) {&#10;            input_username.setText(currentUser)&#10;            rememberCheckBox.isChecked = remembered&#10;        }&#10;&#10;        val login_button = findViewById&lt;Button&gt;(R.id.loginButton)&#10;&#10;        login_button.setOnClickListener {&#10;            val username = input_username.text.toString()&#10;            val password = input_password.text.toString()&#10;&#10;            if (username.isNullOrEmpty() || password.isNullOrEmpty()) {&#10;                Toast.makeText(this, &quot;Username or Password is empty&quot;, Toast.LENGTH_LONG).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (!UsersManager.validateUser(this, username, password)) {&#10;                Toast.makeText(this, &quot;Invalid username or password&quot;, Toast.LENGTH_LONG).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            // Successful login&#10;            UsersManager.setCurrentUser(this, username)&#10;            val editorRemember = rememberCheckBox.isChecked&#10;            UsersManager.setRemember(this, editorRemember)&#10;&#10;            val intent = Intent(this, Home::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;        }&#10;        val register_button = findViewById&lt;Button&gt;(R.id.registerButton)&#10;        register_button.setOnClickListener {&#10;            Log.e(&quot;Sample&quot;,&quot;Clicky&quot;)&#10;&#10;            Toast.makeText(this, &quot;Register&quot;, Toast.LENGTH_LONG).show()&#10;&#10;            val intent = Intent(this, RegisterActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/RegisterActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/RegisterActivity.kt" />
              <option name="originalContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;&#10;class RegisterActivity : Activity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_register)&#10;&#10;        val inputUsername = findViewById&lt;EditText&gt;(R.id.newUsername)&#10;        val inputPassword = findViewById&lt;EditText&gt;(R.id.newPassword)&#10;        val confirmPassword = findViewById&lt;EditText&gt;(R.id.confirm_button)&#10;&#10;        val sharedPref = getSharedPreferences(&quot;UserPref&quot;, MODE_PRIVATE)&#10;&#10;        val register = findViewById&lt;Button&gt;(R.id.go_login)&#10;&#10;        register.setOnClickListener {&#10;            val username = inputUsername.text.toString()&#10;            val password = inputPassword.text.toString()&#10;            val confirm = confirmPassword.text.toString()&#10;&#10;            if (username.isEmpty() || password.isEmpty()) {&#10;                Toast.makeText(this, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (password != confirm) {&#10;                Toast.makeText(this, &quot;Password Validation Failed&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val editor = sharedPref.edit()&#10;            editor.putString(&quot;username&quot;, username)&#10;            editor.putString(&quot;password&quot;, password)&#10;            editor.apply()&#10;&#10;            val intent = Intent(this, LoginActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;&#10;class RegisterActivity : Activity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_register)&#10;&#10;        // Ensure users map exists and admin is present&#10;        UsersManager.migrateLegacy(this)&#10;&#10;        val inputUsername = findViewById&lt;EditText&gt;(R.id.newUsername)&#10;        val inputPassword = findViewById&lt;EditText&gt;(R.id.newPassword)&#10;        val confirmPassword = findViewById&lt;EditText&gt;(R.id.confirm_button)&#10;&#10;        val register = findViewById&lt;Button&gt;(R.id.go_login)&#10;&#10;        register.setOnClickListener {&#10;            val username = inputUsername.text.toString()&#10;            val password = inputPassword.text.toString()&#10;            val confirm = confirmPassword.text.toString()&#10;&#10;            if (username.isEmpty() || password.isEmpty()) {&#10;                Toast.makeText(this, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            if (password != confirm) {&#10;                Toast.makeText(this, &quot;Password Validation Failed&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            val created = UsersManager.createUser(this, username, password)&#10;            if (!created) {&#10;                Toast.makeText(this, &quot;User already exists&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            Toast.makeText(this, &quot;Registration successful&quot;, Toast.LENGTH_SHORT).show()&#10;            val intent = Intent(this, LoginActivity::class.java)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/UserManagementActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/UserManagementActivity.kt" />
              <option name="updatedContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;import android.app.Activity&#10;import android.app.AlertDialog&#10;import android.os.Bundle&#10;import android.view.Gravity&#10;import android.widget.*&#10;&#10;class UserManagementActivity : Activity() {&#10;    private lateinit var listView: ListView&#10;    private lateinit var adapter: ArrayAdapter&lt;String&gt;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_user_management)&#10;&#10;        UsersManager.migrateLegacy(this)&#10;&#10;        listView = findViewById(R.id.userListView)&#10;        val addBtn = findViewById&lt;Button&gt;(R.id.addUserButton)&#10;&#10;        adapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, mutableListOf())&#10;        listView.adapter = adapter&#10;&#10;        refreshUsers()&#10;&#10;        addBtn.setOnClickListener { showAddUserDialog() }&#10;&#10;        listView.setOnItemClickListener { _, _, position, _ -&gt;&#10;            val username = adapter.getItem(position) ?: return@setOnItemClickListener&#10;            showUserActionsDialog(username)&#10;        }&#10;    }&#10;&#10;    private fun refreshUsers() {&#10;        val users = UsersManager.getUsers(this)&#10;        val names = users.keys.toList().sorted()&#10;        adapter.clear()&#10;        adapter.addAll(names)&#10;        adapter.notifyDataSetChanged()&#10;    }&#10;&#10;    private fun showAddUserDialog() {&#10;        val layout = LinearLayout(this).apply {&#10;            orientation = LinearLayout.VERTICAL&#10;            setPadding(50, 20, 50, 0)&#10;        }&#10;        val usernameInput = EditText(this).apply { hint = &quot;Username&quot; }&#10;        val passwordInput = EditText(this).apply { hint = &quot;Password&quot; }&#10;        layout.addView(usernameInput)&#10;        layout.addView(passwordInput)&#10;&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Add User&quot;)&#10;            .setView(layout)&#10;            .setPositiveButton(&quot;Create&quot;) { dialog, _ -&gt;&#10;                val u = usernameInput.text.toString().trim()&#10;                val p = passwordInput.text.toString()&#10;                if (u.isEmpty() || p.isEmpty()) {&#10;                    Toast.makeText(this, &quot;Please provide username and password&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    val ok = UsersManager.createUser(this, u, p)&#10;                    if (ok) {&#10;                        Toast.makeText(this, &quot;User created&quot;, Toast.LENGTH_SHORT).show()&#10;                        refreshUsers()&#10;                    } else {&#10;                        Toast.makeText(this, &quot;User already exists&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;                dialog.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showUserActionsDialog(username: String) {&#10;        val options = arrayOf(&quot;Edit Password&quot;, &quot;Delete User&quot;, &quot;Cancel&quot;)&#10;        AlertDialog.Builder(this)&#10;            .setTitle(username)&#10;            .setItems(options) { dialog, which -&gt;&#10;                when (which) {&#10;                    0 -&gt; showEditPasswordDialog(username)&#10;                    1 -&gt; confirmDeleteUser(username)&#10;                    else -&gt; dialog.dismiss()&#10;                }&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun showEditPasswordDialog(username: String) {&#10;        val input = EditText(this).apply { hint = &quot;New password&quot; }&#10;        val container = LinearLayout(this).apply {&#10;            orientation = LinearLayout.VERTICAL&#10;            setPadding(50, 20, 50, 0)&#10;            addView(input)&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Edit Password for $username&quot;)&#10;            .setView(container)&#10;            .setPositiveButton(&quot;Save&quot;) { dialog, _ -&gt;&#10;                val newPass = input.text.toString()&#10;                if (newPass.isEmpty()) {&#10;                    Toast.makeText(this, &quot;Password cannot be empty&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    val ok = UsersManager.updateUser(this, username, newPass)&#10;                    if (ok) {&#10;                        Toast.makeText(this, &quot;Password updated&quot;, Toast.LENGTH_SHORT).show()&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Failed to update user&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;                dialog.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun confirmDeleteUser(username: String) {&#10;        if (username == &quot;admin&quot;) {&#10;            Toast.makeText(this, &quot;Cannot delete admin user&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Delete $username?&quot;)&#10;            .setMessage(&quot;This action cannot be undone&quot;)&#10;            .setPositiveButton(&quot;Delete&quot;) { dialog, _ -&gt;&#10;                val ok = UsersManager.deleteUser(this, username)&#10;                if (ok) {&#10;                    // if deleted user was current user, clear current user&#10;                    if (UsersManager.getCurrentUser(this) == username) {&#10;                        UsersManager.clearCurrentUser(this)&#10;                        UsersManager.setRemember(this, false)&#10;                    }&#10;                    Toast.makeText(this, &quot;User deleted&quot;, Toast.LENGTH_SHORT).show()&#10;                    refreshUsers()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Failed to delete user&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                dialog.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/UsersManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/edu/uc/intprog32/escarro/myapplication/UsersManager.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package edu.uc.intprog32.escarro.myapplication&#10;&#10;import android.content.Context&#10;import org.json.JSONObject&#10;&#10;object UsersManager {&#10;    private const val PREFS_NAME = &quot;UserPref&quot;&#10;    private const val USERS_KEY = &quot;users&quot; // JSON map username-&gt;password&#10;    private const val CURRENT_USER_KEY = &quot;current_user&quot;&#10;    private const val REMEMBER_KEY = &quot;remember&quot;&#10;&#10;    private fun prefs(context: Context) = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;    // Migrate legacy single username/password keys into the users map (idempotent)&#10;    fun migrateLegacy(context: Context) {&#10;        val pref = prefs(context)&#10;        if (!pref.contains(USERS_KEY)) {&#10;            val legacyUser = pref.getString(&quot;username&quot;, null)&#10;            val legacyPass = pref.getString(&quot;password&quot;, null)&#10;            val users = JSONObject()&#10;            // Use safe-let to avoid platform-type warnings and ensure non-null keys when calling JSONObject.put&#10;            if (!legacyUser.isNullOrEmpty() &amp;&amp; legacyPass != null) {&#10;                val u = legacyUser&#10;                val p = legacyPass&#10;                users.put(u, p)&#10;            }&#10;            // ensure admin exists even if no legacy user&#10;            if (!users.has(&quot;admin&quot;)) {&#10;                users.put(&quot;admin&quot;, &quot;admin&quot;)&#10;            }&#10;            pref.edit().putString(USERS_KEY, users.toString()).apply()&#10;        } else {&#10;            // users exists; ensure admin exists&#10;            // Use elvis to guarantee a non-null JSON string for JSONObject constructor&#10;            val users = JSONObject(pref.getString(USERS_KEY, &quot;{}&quot;) ?: &quot;{}&quot;)&#10;            if (!users.has(&quot;admin&quot;)) {&#10;                users.put(&quot;admin&quot;, &quot;admin&quot;)&#10;                pref.edit().putString(USERS_KEY, users.toString()).apply()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getUsers(context: Context): Map&lt;String, String&gt; {&#10;        val pref = prefs(context)&#10;        val usersJson = pref.getString(USERS_KEY, &quot;{}&quot;) ?: &quot;{}&quot;&#10;        val obj = JSONObject(usersJson)&#10;        val map = mutableMapOf&lt;String, String&gt;()&#10;        val keys = obj.keys()&#10;        while (keys.hasNext()) {&#10;            val k = keys.next()&#10;            map[k] = obj.optString(k, &quot;&quot;)&#10;        }&#10;        return map&#10;    }&#10;&#10;    private fun saveUsers(context: Context, map: Map&lt;String, String&gt;) {&#10;        val obj = JSONObject()&#10;        for ((k, v) in map) obj.put(k, v)&#10;        prefs(context).edit().putString(USERS_KEY, obj.toString()).apply()&#10;    }&#10;&#10;    fun createUser(context: Context, username: String, password: String): Boolean {&#10;        val users = getUsers(context).toMutableMap()&#10;        if (users.containsKey(username)) return false&#10;        users[username] = password&#10;        saveUsers(context, users)&#10;        return true&#10;    }&#10;&#10;    fun updateUser(context: Context, username: String, password: String): Boolean {&#10;        val users = getUsers(context).toMutableMap()&#10;        if (!users.containsKey(username)) return false&#10;        users[username] = password&#10;        saveUsers(context, users)&#10;        return true&#10;    }&#10;&#10;    fun deleteUser(context: Context, username: String): Boolean {&#10;        val users = getUsers(context).toMutableMap()&#10;        if (!users.containsKey(username)) return false&#10;        users.remove(username)&#10;        saveUsers(context, users)&#10;        return true&#10;    }&#10;&#10;    fun validateUser(context: Context, username: String, password: String): Boolean {&#10;        val users = getUsers(context)&#10;        return users[username] == password&#10;    }&#10;&#10;    fun setCurrentUser(context: Context, username: String?) {&#10;        prefs(context).edit().putString(CURRENT_USER_KEY, username).apply()&#10;    }&#10;&#10;    fun getCurrentUser(context: Context): String? = prefs(context).getString(CURRENT_USER_KEY, null)&#10;&#10;    fun clearCurrentUser(context: Context) { setCurrentUser(context, null) }&#10;&#10;    fun getRemember(context: Context): Boolean = prefs(context).getBoolean(REMEMBER_KEY, false)&#10;    fun setRemember(context: Context, remember: Boolean) { prefs(context).edit().putBoolean(REMEMBER_KEY, remember).apply() }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.Home&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#EE82EE&quot;&gt;&#10;    &#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Welcome to Home&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        /&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;304dp&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:src=&quot;@drawable/adachi&quot; /&gt;&#10;    &lt;!-- Username --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/profile_username&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Username&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;    &lt;!-- Extra Info (Email, Bio, etc.) --&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/profile_bio&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;The fog is coming...&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;    &lt;!-- Next Page --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/nextButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Next Page&quot; /&gt;&#10;&#10;    &lt;!-- Logout Button --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/logoutButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Logout&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.Home&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#EE82EE&quot;&gt;&#10;    &#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Welcome to Home&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        /&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;304dp&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:src=&quot;@drawable/adachi&quot; /&gt;&#10;    &lt;!-- Username --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/profile_username&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Username&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;    &lt;!-- Extra Info (Email, Bio, etc.) --&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/profile_bio&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;The fog is coming...&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;    &lt;!-- Next Page --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/nextButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Next Page&quot; /&gt;&#10;&#10;    &lt;!-- User Management (admin only) --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/userManagementButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;User Account Management&quot;&#10;        android:visibility=&quot;gone&quot; /&gt;&#10;&#10;    &lt;!-- Logout Button --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/logoutButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Logout&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_login.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_login.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#EE82EE&quot;&#10;    tools:context=&quot;.LoginActivity&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;304dp&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:src=&quot;@drawable/dera&quot; /&gt;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Login Screen&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Username&quot;&#10;            android:layout_marginHorizontal=&quot;2dp&quot;&#10;            android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editText&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginHorizontal=&quot;2dp&quot;&#10;            android:hint=&quot;Enter Username&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Password&quot;&#10;        android:layout_marginHorizontal=&quot;2dp&quot;&#10;        android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;        &lt;EditText&#10;        android:id=&quot;@+id/editPassword&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;2dp&quot;&#10;        android:hint=&quot;Enter Password&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/loginButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Login&quot;&#10;        android:layout_marginHorizontal=&quot;20dp&quot;&#10;        android:layout_marginVertical=&quot;4dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/registerButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Register&quot;&#10;        android:layout_marginHorizontal=&quot;20dp&quot;&#10;        android:layout_marginVertical=&quot;4dp&quot;/&gt;&#10;&#10;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/main&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#EE82EE&quot;&#10;    tools:context=&quot;.LoginActivity&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;304dp&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:src=&quot;@drawable/dera&quot; /&gt;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Login Screen&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Username&quot;&#10;            android:layout_marginHorizontal=&quot;2dp&quot;&#10;            android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editText&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginHorizontal=&quot;2dp&quot;&#10;            android:hint=&quot;Enter Username&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginVertical=&quot;12dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Password&quot;&#10;        android:layout_marginHorizontal=&quot;2dp&quot;&#10;        android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;        &lt;EditText&#10;        android:id=&quot;@+id/editPassword&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginHorizontal=&quot;2dp&quot;&#10;        android:hint=&quot;Enter Password&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Added: Remember me checkbox --&gt;&#10;    &lt;CheckBox&#10;        android:id=&quot;@+id/rememberCheckBox&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;20dp&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:text=&quot;Remember me&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/loginButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Login&quot;&#10;        android:layout_marginHorizontal=&quot;20dp&quot;&#10;        android:layout_marginVertical=&quot;4dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/registerButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Register&quot;&#10;        android:layout_marginHorizontal=&quot;20dp&quot;&#10;        android:layout_marginVertical=&quot;4dp&quot;/&gt;&#10;&#10;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_user_management.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_user_management.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    android:background=&quot;#EE82EE&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/addUserButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Add User&quot; /&gt;&#10;&#10;    &lt;ListView&#10;        android:id=&quot;@+id/userListView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:dividerHeight=&quot;1dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>